import pathlib
from typing import Union, Tuple
import pandas as pd
import numpy as np


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname) #dealing only with paths
        if not data_fname.exists():
            raise(ValueError) # in case file does not exist
        self.data_fname = data_fname
        self.data = {}
        pass

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
            """
        ages = self.data['age']
        bins = np.array([0,10,20,30,40,50,60,70,80,90,100])
        ages.plot.hist(bins=bins)
        (hist, bins) = np.histogram(ages,bins)

        return hist, bins
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
            """

        mails = self.data['email']
        good_mails = mails.str.contains(r'@') \
         & ~mails.str.startswith('@') & ~mails.str.endswith('@') \
          & ~mails.str.startswith('.') & ~mails.str.endswith('.') \
            & (mails.str.contains(r'\.'))\
             & ~mails.str.contains(r'@\.') # a binary mask for only good mails
        
        df = self.data[good_mails]
        df = df.reset_index() 

        return df
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
            """
        question_columns = ['q1','q2','q3','q4','q5']
        means = self.data[question_columns].mean(axis=1)
        na_subjects = np.zeros(self.data.shape[0],dtype=bool) #for all of subjects with na somewhere. further on
        df = self.data

        for col in question_columns: #for each column 
            col_na_subjects = self.data[col].isna().to_numpy() # getting a mask for the na vals
            df.loc[col_na_subjects,col] = means[col_na_subjects] # replacing them with the averages per index
            na_subjects = na_subjects | col_na_subjects # for the current question and the preceding ones

        arr = np.where(na_subjects)[0] # as indices

        return df, arr
    
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        question_columns = ['q1','q2','q3','q4','q5']
        means = np.floor(self.data[question_columns].mean(axis=1)) #floored means by participant
        score = pd.Series([np.nan]* self.data.shape[0],name='score',dtype=pd.UInt8Dtype())
        #initializing with nans
        nans_per_sub = (self.data[question_columns].isna()).sum(axis=1) # getting nans number per participant
        score[nans_per_sub <= maximal_nans_per_sub] = means[nans_per_sub <= maximal_nans_per_sub]

        df = self.data
        df['score'] = score
        return df
 
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        copy_data = self.data.loc[~self.data['age'].isna().to_numpy(),:] # removing nan age participants
        df = copy_data
        df = df.drop(columns=['age','gender']) # removing columns; will appear only as MultiIndex

        age_new = pd.Series(copy_data['age'],name='raw_age') 
        # changing the name of age since the boolean index in the tests csv is age, 
        # duplicates are not required and I wanted to leave raw age as index and add the boolean as a column
        multi_frame = pd.concat(
             [copy_data.index.to_frame(name='ordinal'),
               copy_data['gender'],age_new],axis=1) 
        #ordinal, gender and raw_age together
        new_indices = pd.MultiIndex.from_frame(multi_frame)

        df.index = new_indices # applying MultiIndex

        threshold = 40
        age_thresh = pd.Series(df.index.get_level_values('raw_age') > threshold,name='age')
        age_thresh.index = new_indices
        df = pd.concat([df,age_thresh], axis=1)

        return df.groupby(['gender','age'])[['q1','q2','q3','q4','q5']].mean()

if __name__ == '__main__':
    # print(QuestionnaireAnalysis('data.df').data_fname)
    data = QuestionnaireAnalysis('data.json')
    # data.read_data()
    # print(data.data)
    # print(data.data.columns)
    # hist, bins = data.show_age_distrib()
    # print(hist)
    # print(bins)
    # print(np.load('tests_data/q1_hist.npz')['hist'])
    # print(np.load('tests_data/q1_hist.npz')['edges'])

    # pd.set_option('display.max_rows', None)
    # print(np.load('tests_data/q3_fillna.npy'))
    # print(data.fill_na_with_mean())
    # data.score_subjects()
    print(data.correlate_gender_age())

